-- VHDL Entity my_project2_lib.ShadowG.symbol
--
-- Created:
--          by - mg41.bin (srge02.ecn.purdue.edu)
--          at - 11:49:28 12/04/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY ShadowG IS
   PORT( 
      clk               : IN     std_logic;
      data_in           : IN     std_logic_vector (15 DOWNTO 0);
      external_trigger  : IN     std_logic;
      reset             : IN     std_logic;
      z_l               : IN     std_logic_vector (7 DOWNTO 0 );
      address           : OUT    std_logic_vector (15 DOWNTO 0);
      data_out          : OUT    std_logic_vector (15 DOWNTO 0);
      read_enable_sram  : OUT    std_logic;
      write_enable_sram : OUT    std_logic
   );

-- Declarations

END ShadowG ;

--
-- VHDL Architecture my_project2_lib.ShadowG.struct
--
-- Created:
--          by - mg41.bin (srge02.ecn.purdue.edu)
--          at - 11:49:28 12/04/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE IEEE.STD_LOGIC_UNSIGNED.all;

--LIBRARY my_project2_lib;

ARCHITECTURE struct OF ShadowG IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Addr_x                     : std_logic_vector(7 DOWNTO 0);
   SIGNAL Addr_y                     : std_logic_vector(7 DOWNTO 0);
   SIGNAL DONE                       : std_logic;
   SIGNAL SHADEPIXEL_X               : std_logic_vector(7 DOWNTO 0);
   SIGNAL SHADEPIXEL_Y               : std_logic_vector(7 DOWNTO 0);
   SIGNAL boundry_out                : std_logic;
   SIGNAL buffer_control_signal      : std_logic;
   SIGNAL buffer_full                : std_logic;
   SIGNAL busy                       : std_logic;
   SIGNAL enable_line_raster_out     : std_logic;
   SIGNAL fifo_empty                 : std_logic;
   SIGNAL finsihed_boundary_out      : std_logic;
   SIGNAL output_buffer_empty        : std_logic;
   SIGNAL output_buffer_full         : std_logic;
   SIGNAL read_enable_input_shader   : std_logic;
   SIGNAL shader_input               : std_logic;
   SIGNAL shader_send_data           : std_logic;
   SIGNAL shading_or_boundary        : std_logic;
   SIGNAL shadow_object              : std_logic;
   SIGNAL shadow_vertices            : std_logic_vector(15 DOWNTO 0);
   SIGNAL write_enable_input_fifo    : std_logic;
   SIGNAL write_enable_input_shader  : std_logic;
   SIGNAL write_to_memory_controller : std_logic;
   SIGNAL x1_output                  : std_logic_vector(7 DOWNTO 0 );
   SIGNAL x2_output                  : std_logic_vector(7 DOWNTO 0 );
   SIGNAL y1_output                  : std_logic_vector(7 DOWNTO 0);
   SIGNAL y2_output                  : std_logic_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT Line_Raster
   PORT (
      Clk         : IN     std_logic;
      Rst         : IN     std_logic;
      X0          : IN     std_logic_vector (7 DOWNTO 0);
      X1          : IN     std_logic_vector (7 DOWNTO 0);
      Y0          : IN     std_logic_vector (7 DOWNTO 0);
      Y1          : IN     std_logic_vector (7 DOWNTO 0);
      enable      : IN     std_logic;
      Addr_x      : OUT    std_logic_vector (7 DOWNTO 0);
      Addr_y      : OUT    std_logic_vector (7 DOWNTO 0);
      boundry_out : OUT    std_logic;
      busy        : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT line_buffer
   PORT (
      clk                 : IN     std_logic;
      control             : IN     std_logic;
      data_in             : IN     std_logic_vector (15 DOWNTO 0 );
      data_in_ram         : IN     std_logic_vector (15 DOWNTO 0 );
      read_enable         : IN     std_logic;
      reset               : IN     std_logic;
      shading_or_boundary : IN     std_logic;
      write_enable        : IN     std_logic;
      buffer_full         : OUT    std_logic;
      fifo_empty          : OUT    std_logic;
      x1_output           : OUT    std_logic_vector (7 DOWNTO 0 );
      x2_output           : OUT    std_logic_vector (7 DOWNTO 0 );
      y1_output           : OUT    std_logic_vector (7 DOWNTO 0);
      y2_output           : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT matrix_math
   PORT (
      clk                        : IN     std_logic;
      data_in                    : IN     std_logic_vector (15 DOWNTO 0 );
      external_trigger           : IN     std_logic;
      reset                      : IN     std_logic;
      write_enable               : IN     std_logic;
      z_l                        : IN     std_logic_vector (7 DOWNTO 0 );
      input_fifo_empty           : OUT    std_logic;
      input_fifo_full            : OUT    std_logic;
      output_buffer_empty        : OUT    std_logic;
      output_buffer_full         : OUT    std_logic;
      shadow_vertices            : OUT    std_logic_vector (15 DOWNTO 0);
      write_to_memory_controller : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT memory_controller
   PORT (
      boundry_data_x           : IN     std_logic_vector (7 DOWNTO 0);
      boundry_data_y           : IN     std_logic_vector (7 DOWNTO 0);
      boundry_input            : IN     std_logic;
      buffer_send_data         : IN     std_logic;
      clk                      : IN     std_logic;
      data_in                  : IN     std_logic_vector (15 DOWNTO 0);
      finished_boundry         : IN     std_logic;
      reset                    : IN     std_logic;
      shader_datain_x          : IN     std_logic_vector (7 DOWNTO 0);
      shader_datain_y          : IN     std_logic_vector (7 DOWNTO 0);
      shader_done              : IN     std_logic;
      shader_input             : IN     std_logic;
      shader_object_shadow     : IN     std_logic;
      shadow_object            : IN     std_logic;
      start_overall_controller : IN     std_logic;
      write_memory_controller  : IN     std_logic;
      address                  : OUT    std_logic_vector (15 DOWNTO 0);
      data_out                 : OUT    std_logic_vector (15 DOWNTO 0);
      read_enable_sram         : OUT    std_logic;
      write_enable_input_fifo  : OUT    std_logic;
      write_enable_sram        : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT raster_controller
   PORT (
      clk                       : IN     std_logic;
      input_fifo_shader_empty   : IN     std_logic;
      input_fifo_shader_full    : IN     std_logic;
      line_raster_busy          : IN     std_logic;
      output_buffer_math_empty  : IN     std_logic;
      output_buffer_math_full   : IN     std_logic;
      reset                     : IN     std_logic;
      shader_done               : IN     std_logic;
      buffer_control_signal     : OUT    std_logic;
      enable_line_raster_out    : OUT    std_logic;
      finsihed_boundary_out     : OUT    std_logic;
      read_enable_input_shader  : OUT    std_logic;
      shader_enable             : OUT    std_logic;
      shader_input              : OUT    std_logic;
      shader_send_data          : OUT    std_logic;
      shading_or_boundary       : OUT    std_logic;
      shadow_object             : OUT    std_logic;
      write_enable_input_shader : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT shader
   PORT (
      CLK          : IN     std_logic;
      ENABLE       : IN     std_logic;
      PIXEL_X1     : IN     std_logic_vector (7 DOWNTO 0);
      PIXEL_X2     : IN     std_logic_vector (7 DOWNTO 0);
      PIXEL_Y1     : IN     std_logic_vector (7 DOWNTO 0);
      PIXEL_Y2     : IN     std_logic_vector (7 DOWNTO 0);
      RST          : IN     std_logic;
      DONE         : OUT    std_logic;
      LINE_DONE    : OUT    std_logic;
      SHADEPIXEL_X : OUT    std_logic_vector (7 DOWNTO 0);
      SHADEPIXEL_Y : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
--   FOR ALL : Line_Raster USE ENTITY my_project2_lib.Line_Raster;
 --  FOR ALL : line_buffer USE ENTITY my_project2_lib.line_buffer;
 --  FOR ALL : matrix_math USE ENTITY my_project2_lib.matrix_math;
 --  FOR ALL : memory_controller USE ENTITY my_project2_lib.memory_controller;
 --  FOR ALL : raster_controller USE ENTITY my_project2_lib.raster_controller;
  -- FOR ALL : shader USE ENTITY my_project2_lib.shader;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_2 : Line_Raster
      PORT MAP (
         X0          => x1_output,
         X1          => x2_output,
         Y0          => y1_output,
         Y1          => y2_output,
         enable      => enable_line_raster_out,
         Clk         => clk,
         Rst         => reset,
         busy        => busy,
         Addr_x      => Addr_x,
         Addr_y      => Addr_y,
         boundry_out => boundry_out
      );
   U_1 : line_buffer
      PORT MAP (
         reset               => reset,
         clk                 => clk,
         data_in             => shadow_vertices,
         data_in_ram         => data_in,
         x1_output           => x1_output,
         y1_output           => y1_output,
         x2_output           => x2_output,
         y2_output           => y2_output,
         control             => buffer_control_signal,
         shading_or_boundary => shading_or_boundary,
         write_enable        => write_enable_input_shader,
         read_enable         => read_enable_input_shader,
         fifo_empty          => fifo_empty,
         buffer_full         => buffer_full
      );
   U_3 : matrix_math
      PORT MAP (
         clk                        => clk,
         data_in                    => data_in,
         external_trigger           => external_trigger,
         reset                      => reset,
         write_enable               => write_enable_input_fifo,
         z_l                        => z_l,
         input_fifo_empty           => OPEN,
         input_fifo_full            => OPEN,
         output_buffer_empty        => output_buffer_empty,
         output_buffer_full         => output_buffer_full,
         shadow_vertices            => shadow_vertices,
         write_to_memory_controller => write_to_memory_controller
      );
   U_4 : memory_controller
      PORT MAP (
         clk                      => clk,
         reset                    => reset,
         write_memory_controller  => write_to_memory_controller,
         start_overall_controller => external_trigger,
         boundry_input            => boundry_out,
         shadow_object            => shadow_object,
         boundry_data_x           => Addr_x,
         boundry_data_y           => Addr_y,
         shader_input             => shader_input,
         shader_object_shadow     => shadow_object,
         shader_datain_x          => SHADEPIXEL_X,
         shader_datain_y          => SHADEPIXEL_Y,
         buffer_send_data         => buffer_control_signal,
         finished_boundry         => finsihed_boundary_out,
         shader_done              => DONE,
         data_in                  => data_in,
         data_out                 => data_out,
         address                  => address,
         read_enable_sram         => read_enable_sram,
         write_enable_sram        => write_enable_sram,
         write_enable_input_fifo  => write_enable_input_fifo
      );
   U_5 : raster_controller
      PORT MAP (
         clk                       => clk,
         reset                     => reset,
         input_fifo_shader_full    => buffer_full,
         input_fifo_shader_empty   => fifo_empty,
         line_raster_busy          => busy,
         output_buffer_math_empty  => output_buffer_empty,
         output_buffer_math_full   => output_buffer_full,
         shader_done               => DONE,
         read_enable_input_shader  => read_enable_input_shader,
         write_enable_input_shader => write_enable_input_shader,
         enable_line_raster_out    => enable_line_raster_out,
         finsihed_boundary_out     => finsihed_boundary_out,
         shadow_object             => shadow_object,
         shader_enable             => shader_send_data,
         shader_send_data          => OPEN,
         shader_input              => shader_input,
         shading_or_boundary       => shading_or_boundary,
         buffer_control_signal     => buffer_control_signal
      );
   U_0 : shader
      PORT MAP (
         CLK          => clk,
         RST          => reset,
         ENABLE       => shader_send_data,
         PIXEL_X1     => x1_output,
         PIXEL_X2     => x2_output,
         PIXEL_Y1     => y1_output,
         PIXEL_Y2     => y2_output,
         SHADEPIXEL_X => SHADEPIXEL_X,
         SHADEPIXEL_Y => SHADEPIXEL_Y,
         LINE_DONE    => OPEN,
         DONE         => DONE
      );

END struct;
