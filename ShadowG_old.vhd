-- VHDL Entity my_project2_lib.ShadowG.symbol
--
-- Created:
--          by - mg41.bin (srge02.ecn.purdue.edu)
--          at - 01:17:05 12/03/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY ShadowG IS
   PORT( 
      boundry_object_shadow    : IN     std_logic;
      clk                      : IN     std_logic;
      data_in                  : IN     std_logic_vector (15 DOWNTO 0 );
      external_trigger         : IN     std_logic;
      reset                    : IN     std_logic;
      start_overall_controller : IN     std_logic;
      z_l                      : IN     std_logic_vector (7 DOWNTO 0 );
      address                  : OUT    std_logic_vector (15 DOWNTO 0);
      data_out                 : OUT    std_logic_vector (15 DOWNTO 0);
      read_enable_sram         : OUT    std_logic;
      write_enable_sram        : OUT    std_logic
   );

-- Declarations

END ShadowG ;

--
-- VHDL Architecture my_project2_lib.ShadowG.struct
--
-- Created:
--          by - mg41.bin (srge02.ecn.purdue.edu)
--          at - 01:17:05 12/03/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

--LIBRARY my_project2_lib;

ARCHITECTURE struct OF ShadowG IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL output_buffer_empty        : std_logic;
   SIGNAL output_buffer_full         : std_logic;
   SIGNAL shadow_vertices            : std_logic_vector(15 DOWNTO 0);
   SIGNAL write_to_memory_controller : std_logic;


   -- Component Declarations
   COMPONENT Raster
   PORT (
      boundry_object_shadow    : IN     std_logic;
      clk                      : IN     std_logic;
      data_in                  : IN     std_logic_vector (15 DOWNTO 0);
      data_in1                 : IN     std_logic_vector (15 DOWNTO 0 );
      output_buffer_math_empty : IN     std_logic;
      output_buffer_math_full  : IN     std_logic;
      reset                    : IN     std_logic;
      start_overall_controller : IN     std_logic;
      write_memory_controller  : IN     std_logic;
      address                  : OUT    std_logic_vector (15 DOWNTO 0);
      data_out                 : OUT    std_logic_vector (15 DOWNTO 0);
      read_enable_sram         : OUT    std_logic;
      write_enable_sram        : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT matrix_math
   PORT (
      clk                        : IN     std_logic;
      data_in                    : IN     std_logic_vector (15 DOWNTO 0 );
      external_trigger           : IN     std_logic;
      reset                      : IN     std_logic;
      z_l                        : IN     std_logic_vector (7 DOWNTO 0 );
      input_fifo_empty           : OUT    std_logic;
      input_fifo_full            : OUT    std_logic;
      output_buffer_empty        : OUT    std_logic;
      output_buffer_full         : OUT    std_logic;
      shadow_vertices            : OUT    std_logic_vector (15 DOWNTO 0);
      write_to_memory_controller : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   --FOR ALL : Raster USE ENTITY my_project2_lib.Raster;
   --FOR ALL : matrix_math USE ENTITY my_project2_lib.matrix_math;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_1 : Raster
      PORT MAP (
         boundry_object_shadow    => boundry_object_shadow,
         clk                      => clk,
         data_in                  => data_in,
         data_in1                 => shadow_vertices,
         output_buffer_math_empty => output_buffer_empty,
         output_buffer_math_full  => output_buffer_full,
         reset                    => reset,
         write_memory_controller  => write_to_memory_controller,
         start_overall_controller => start_overall_controller,
         address                  => address,
         data_out                 => data_out,
         read_enable_sram         => read_enable_sram,
         write_enable_sram        => write_enable_sram
      );
   U_0 : matrix_math
      PORT MAP (
         clk                        => clk,
         data_in                    => data_in,
         external_trigger           => external_trigger,
         reset                      => reset,
         z_l                        => z_l,
         input_fifo_empty           => OPEN,
         input_fifo_full            => OPEN,
         output_buffer_empty        => output_buffer_empty,
         output_buffer_full         => output_buffer_full,
         shadow_vertices            => shadow_vertices,
         write_to_memory_controller => write_to_memory_controller
      );

END struct;
