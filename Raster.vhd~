-- VHDL Entity my_project2_lib.Raster.symbol
--
-- Created:
--          by - mg41.bin (srge02.ecn.purdue.edu)
--          at - 07:24:31 12/02/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY Raster IS
   PORT( 
      boundry_object_shadow    : IN     std_logic;
      clk                      : IN     std_logic;
      data_in                  : IN     std_logic_vector (15 DOWNTO 0);
      data_in1                 : IN     std_logic_vector (15 DOWNTO 0 );
      output_buffer_math_empty : IN     std_logic;
      output_buffer_math_full  : IN     std_logic;
      reset                    : IN     std_logic;
      write_memory_controller  : IN     std_logic;
      start_overall_controller : IN     std_logic;
      address                  : OUT    std_logic_vector (15 DOWNTO 0);
      data_out                 : OUT    std_logic_vector (15 DOWNTO 0);
      read_enable_sram         : OUT    std_logic;
      write_enable_sram        : OUT    std_logic;
      write_enable_input_fifo  : OUT    std_logic
      
   );

-- Declarations

END Raster ;

--
-- VHDL Architecture my_project2_lib.Raster.struct
--
-- Created:
--          by - mg41.bin (srge02.ecn.purdue.edu)
--          at - 07:24:31 12/02/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_UNSIGNED.all;

--LIBRARY my_project2_lib;

ARCHITECTURE struct OF Raster IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Addr_x                    : std_logic_vector(7 DOWNTO 0);
   SIGNAL Addr_y                    : std_logic_vector(7 DOWNTO 0);
   SIGNAL DONE                      : std_logic;
   SIGNAL LINE_DONE                 : std_logic;
   SIGNAL SHADEPIXEL_X              : std_logic_vector(7 DOWNTO 0);
   SIGNAL SHADEPIXEL_Y              : std_logic_vector(7 DOWNTO 0);
   SIGNAL boundry_out               : std_logic;
   SIGNAL buffer_control_signal     : std_logic;
   SIGNAL buffer_full               : std_logic;
   SIGNAL busy                      : std_logic;
   SIGNAL data_in_ram               : std_logic_vector(15 DOWNTO 0 );
   SIGNAL enable_line_raster_out    : std_logic;
   SIGNAL fifo_empty                : std_logic;
   SIGNAL finsihed_boundary_out     : std_logic;
   SIGNAL read_enable_input_shader  : std_logic;
   SIGNAL shader_dataout_x1         : std_logic_vector(7 DOWNTO 0);
   SIGNAL shader_dataout_x2         : std_logic_vector(7 DOWNTO 0);
   SIGNAL shader_enable             : std_logic;
   SIGNAL shader_input              : std_logic;
   SIGNAL shader_send_data          : std_logic;
   SIGNAL shadow_object             : std_logic;
   SIGNAL write_enable_input_shader : std_logic;
   SIGNAL x1_output                 : std_logic_vector(7 DOWNTO 0 );
   SIGNAL x2_output                 : std_logic_vector(7 DOWNTO 0 );
   SIGNAL y1_output                 : std_logic_vector(7 DOWNTO 0);
   SIGNAL y2_output                 : std_logic_vector(7 DOWNTO 0);


   -- Component Declarations
   COMPONENT Line_Raster
   PORT (
      Clk         : IN     std_logic;
      Rst         : IN     std_logic;
      X0          : IN     std_logic_vector (7 DOWNTO 0);
      X1          : IN     std_logic_vector (7 DOWNTO 0);
      Y0          : IN     std_logic_vector (7 DOWNTO 0);
      Y1          : IN     std_logic_vector (7 DOWNTO 0);
      enable      : IN     std_logic;
      Addr_x      : OUT    std_logic_vector (7 DOWNTO 0);
      Addr_y      : OUT    std_logic_vector (7 DOWNTO 0);
      boundry_out : OUT    std_logic;
      busy        : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT line_buffer
   PORT (
      clk           : IN     std_logic;
      control       : IN     std_logic;
      data_in       : IN     std_logic_vector (15 DOWNTO 0 );
      data_in_ram   : IN     std_logic_vector (15 DOWNTO 0 );
      read_enable   : IN     std_logic;
      reset         : IN     std_logic;
      write_enable  : IN     std_logic;
      buffer_full   : OUT    std_logic;
      fifo_empty    : OUT    std_logic;
      x1_output     : OUT    std_logic_vector (7 DOWNTO 0 );
      x2_output     : OUT    std_logic_vector (7 DOWNTO 0 );
      y1_output     : OUT    std_logic_vector (7 DOWNTO 0);
      y2_output     : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT memory_controller
   PORT (
      boundry_data_x        : IN     std_logic_vector (7 DOWNTO 0);
      boundry_data_y        : IN     std_logic_vector (7 DOWNTO 0);
      boundry_input         : IN     std_logic;
      boundry_object_shadow : IN     std_logic;
      buffer_send_data      : IN     std_logic;
      clk                   : IN     std_logic;
      data_in               : IN     std_logic_vector (15 DOWNTO 0);
      finished_boundry      : IN     std_logic;
      line_shade_done       : IN     std_logic;
      reset                 : IN     std_logic;
      shader_datain_x       : IN     std_logic_vector (7 DOWNTO 0);
      shader_datain_y       : IN     std_logic_vector (7 DOWNTO 0);
      shader_input          : IN     std_logic;
      shader_object_shadow  : IN     std_logic;
      shader_send_data      : IN     std_logic;
      address               : OUT    std_logic_vector (15 DOWNTO 0);
      data_out              : OUT    std_logic_vector (15 DOWNTO 0);
      read_enable_sram      : OUT    std_logic;
      shader_dataout_x1     : OUT    std_logic_vector (7 DOWNTO 0);
      shader_dataout_x2     : OUT    std_logic_vector (7 DOWNTO 0);
      write_enable_sram     : OUT    std_logic;
      write_enable_input_fifo : OUT  std_logic
   );
   END COMPONENT;
   COMPONENT raster_controller
   PORT (
      clk                       : IN     std_logic;
      input_fifo_shader_empty   : IN     std_logic;
      input_fifo_shader_full    : IN     std_logic;
      line_done                 : IN     std_logic;
      line_raster_busy          : IN     std_logic;
      output_buffer_math_empty  : IN     std_logic;
      output_buffer_math_full   : IN     std_logic;
      reset                     : IN     std_logic;
      shader_done               : IN     std_logic;
      buffer_control_signal     : OUT    std_logic;
      enable_line_raster_out    : OUT    std_logic;
      finsihed_boundary_out     : OUT    std_logic;
      read_enable_input_shader  : OUT    std_logic;
      shader_enable             : OUT    std_logic;
      shader_input              : OUT    std_logic;
      shader_send_data          : OUT    std_logic;
      shadow_object             : OUT    std_logic;
      write_enable_input_shader : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT shader
   PORT (
      CLK          : IN     std_logic;
      ENABLE       : IN     std_logic;
      PIXEL_X1     : IN     std_logic_vector (7 DOWNTO 0);
      PIXEL_X2     : IN     std_logic_vector (7 DOWNTO 0);
      RST          : IN     std_logic;
      DONE         : OUT    std_logic;
      LINE_DONE    : OUT    std_logic;
      SHADEPIXEL_X : OUT    std_logic_vector (7 DOWNTO 0);
      SHADEPIXEL_Y : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
  -- FOR ALL : Line_Raster USE ENTITY my_project2_lib.Line_Raster;
  -- FOR ALL : line_buffer USE ENTITY my_project2_lib.line_buffer;
  -- FOR ALL : memory_controller USE ENTITY my_project2_lib.memory_controller;
  -- FOR ALL : raster_controller USE ENTITY my_project2_lib.raster_controller;
   --FOR ALL : shader USE ENTITY my_project2_lib.shader;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : Line_Raster
      PORT MAP (
         X0          => x1_output,
         X1          => x2_output,
         Y0          => y1_output,
         Y1          => y2_output,
         enable      => enable_line_raster_out,
         Clk         => clk,
         Rst         => reset,
         busy        => busy,
         Addr_x      => Addr_x,
         Addr_y      => Addr_y,
         boundry_out => boundry_out
      );
   U_5 : line_buffer
      PORT MAP (
         reset         => reset,
         clk           => clk,
         data_in       => data_in1,
         data_in_ram   => data_in_ram,
         x1_output     => x1_output,
         y1_output     => y1_output,
         x2_output     => x2_output,
         y2_output     => y2_output,
         control       => buffer_control_signal,
         write_enable  => write_enable_input_shader,
         read_enable   => read_enable_input_shader,
         fifo_empty    => fifo_empty,
         buffer_full   => buffer_full
      );
   U_1 : memory_controller
      PORT MAP (
         clk                   => clk,
         reset                 => reset,
         boundry_input         => boundry_out,
         boundry_object_shadow => boundry_object_shadow,
         boundry_data_x        => Addr_x,
         boundry_data_y        => Addr_y,
         shader_input          => shader_input,
         shader_object_shadow  => shadow_object,
         shader_datain_x       => SHADEPIXEL_X,
         shader_datain_y       => SHADEPIXEL_Y,
         shader_send_data      => shader_send_data,
         shader_dataout_x1     => shader_dataout_x1,
         shader_dataout_x2     => shader_dataout_x2,
         buffer_send_data      => buffer_control_signal,
         finished_boundry      => finsihed_boundary_out,
         line_shade_done       => LINE_DONE,
         data_out              => data_out,
         data_in               => data_in,
         address               => address,
         read_enable_sram      => read_enable_sram,
         write_enable_input_fifo=>write_enable_input_fifo,
         write_enable_sram     => write_enable_sram,
	write_memory_controller => write_memory_controller ,
	start_overall_controller=>start_overall_controller
      );
   U_3 : raster_controller
      PORT MAP (
         clk                       => clk,
         reset                     => reset,
         input_fifo_shader_full    => buffer_full,
         input_fifo_shader_empty   => fifo_empty,
         line_done                 => LINE_DONE,
         read_enable_input_shader  => read_enable_input_shader,
         write_enable_input_shader => write_enable_input_shader,
         enable_line_raster_out    => enable_line_raster_out,
         line_raster_busy          => busy,
         finsihed_boundary_out     => finsihed_boundary_out,
         output_buffer_math_empty  => output_buffer_math_empty,
         output_buffer_math_full   => output_buffer_math_full,
         shadow_object             => shadow_object,
         shader_enable             => shader_enable,
         shader_done               => DONE,
         shader_send_data          => shader_send_data,
         shader_input              => shader_input,
         buffer_control_signal     => buffer_control_signal
      );
   U_2 : shader
      PORT MAP (
         CLK          => clk,
         RST          => reset,
         ENABLE       => shader_enable,
         PIXEL_X1     => shader_dataout_x1,
         PIXEL_X2     => shader_dataout_x2,
         SHADEPIXEL_X => SHADEPIXEL_X,
         SHADEPIXEL_Y => SHADEPIXEL_Y,
         LINE_DONE    => LINE_DONE,
         DONE         => DONE
      );

END struct;
