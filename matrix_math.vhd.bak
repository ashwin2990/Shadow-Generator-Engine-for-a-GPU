-- VHDL Entity My_Lib.matrix_math.symbol
--
-- Created:
--          by - mg60.bin (srge00.ecn.purdue.edu)
--          at - 02:46:30 12/03/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY matrix_math IS
   PORT( 
      clk                        : IN     std_logic;
      data_in                    : IN     std_logic_vector (15 DOWNTO 0 );
      external_trigger           : IN     std_logic;
      reset                      : IN     std_logic;
      write_enable               : IN     std_logic;
      z_l                        : IN     std_logic_vector (7 DOWNTO 0 );
      input_fifo_empty           : OUT    std_logic;
      input_fifo_full            : OUT    std_logic;
      output_buffer_empty        : OUT    std_logic;
      output_buffer_full         : OUT    std_logic;
      shadow_vertices            : OUT    std_logic_vector (15 DOWNTO 0);
      write_to_memory_controller : OUT    std_logic
   );

-- Declarations

END matrix_math ;

--
-- VHDL Architecture My_Lib.matrix_math.struct
--
-- Created:
--          by - mg60.bin (srge00.ecn.purdue.edu)
--          at - 02:46:30 12/03/11
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.std_logic_UNSIGNED.all;
USE ieee.numeric_std.all;

LIBRARY My_Lib;

ARCHITECTURE struct OF matrix_math IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL add_ass                          : std_logic;
   SIGNAL buffer_full                      : std_logic;
   SIGNAL data_out_a                       : std_logic_vector(31 DOWNTO 16 );
   SIGNAL data_out_a1                      : std_logic_vector(7 DOWNTO 0 );
   SIGNAL data_out_b                       : std_logic_vector(15 DOWNTO 0);
   SIGNAL data_out_b1                      : std_logic_vector(7 DOWNTO 0);
   SIGNAL divide_done                      : std_logic;
   SIGNAL divide_result                    : std_logic_vector(15 DOWNTO 0 );
   SIGNAL fifo_empty                       : std_logic;
   SIGNAL intermediate_buffer_read_enable  : std_logic;
   SIGNAL intermediate_buffer_write_enable : std_logic;
   SIGNAL multiplication_done              : std_logic;
   SIGNAL multiply                         : std_logic;
   SIGNAL multiply_controller              : std_logic;
   SIGNAL read_enable                      : std_logic;
   SIGNAL read_enable_output_buffer        : std_logic;
   SIGNAL reset_intermediate_buffer        : std_logic;
   SIGNAL result                           : std_logic_vector(15 DOWNTO 0);
   SIGNAL result1                          : std_logic_vector(15 DOWNTO 0 );
   SIGNAL write_enable_output_buffer       : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL input_fifo_full_internal     : std_logic;
   SIGNAL output_buffer_empty_internal : std_logic;
   SIGNAL output_buffer_full_internal  : std_logic;


   -- Component Declarations
   COMPONENT adder
   PORT (
      a       : IN     std_logic_vector (15 DOWNTO 0 );
      add_ass : IN     STD_LOGIC;
      b       : IN     std_logic_vector (15 DOWNTO 0 );
      result  : OUT    std_logic_vector (15 DOWNTO 0 )
   );
   END COMPONENT;
   COMPONENT falling_edge_detect
   PORT (
      clk                 : IN     std_logic;
      fifo_empty          : IN     std_logic;
      reset               : IN     std_logic;
      multiply_controller : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT input_fifo
   PORT (
      clk              : IN     std_logic;
      data_in          : IN     std_logic_vector (15 DOWNTO 0 );
      read_enable      : IN     std_logic;
      reset            : IN     std_logic;
      write_enable     : IN     std_logic;
      data_out_a       : OUT    std_logic_vector (7 DOWNTO 0 );
      data_out_b       : OUT    std_logic_vector (7 DOWNTO 0);
      input_fifo_empty : OUT    std_logic;
      input_fifo_full  : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT interm_buffer
   PORT (
      clk          : IN     std_logic;
      data_in      : IN     std_logic_vector (15 DOWNTO 0 );
      read_enable  : IN     std_logic;
      reset        : IN     std_logic;
      reset_buffer : IN     std_logic;
      write_enable : IN     std_logic;
      buffer_full  : OUT    std_logic;
      data_out_a   : OUT    std_logic_vector (31 DOWNTO 16 );
      data_out_b   : OUT    std_logic_vector (15 DOWNTO 0);
      fifo_empty   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT matrix_controller
   PORT (
      clk                              : IN     std_logic;
      divide_done                      : IN     std_logic;
      external_trigger                 : IN     std_logic;
      input_fifo_full                  : IN     std_logic;
      intermediate_buffer_full         : IN     std_logic;
      multiplication_done              : IN     std_logic;
      multiply_controller              : IN     std_logic;
      output_buffer_empty              : IN     std_logic;
      output_buffer_full               : IN     std_logic;
      reset                            : IN     std_logic;
      add_ass                          : OUT    std_logic;
      intermediate_buffer_read_enable  : OUT    std_logic;
      intermediate_buffer_write_enable : OUT    std_logic;
      multiply                         : OUT    std_logic;
      read_enable                      : OUT    std_logic;
      read_enable_output_buffer        : OUT    std_logic;
      reset_intermediate_buffer        : OUT    std_logic;
      write_enable                     : OUT    std_logic;
      write_enable_output_buffer       : OUT    std_logic;
      write_to_memory_controller       : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT matrix_divide
   PORT (
      clk                 : IN     std_logic;
      multiplication_done : IN     std_logic;
      reset               : IN     std_logic;
      result              : IN     std_logic_vector (15 DOWNTO 0 );
      z_l                 : IN     std_logic_vector (7 DOWNTO 0 );
      divide_done         : OUT    std_logic;
      divide_result       : OUT    std_logic_vector (15 DOWNTO 0 )
   );
   END COMPONENT;
   COMPONENT multiplier
   PORT (
      a                   : IN     std_logic_vector (7 DOWNTO 0);
      b                   : IN     std_logic_vector (7 DOWNTO 0);
      multiply            : IN     std_logic;
      output_ready        : IN     std_logic;
      multiplication_done : OUT    std_logic;
      result              : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT output_buffer
   PORT (
      adder_result        : IN     std_logic_vector (15 DOWNTO 0 );
      clk                 : IN     std_logic;
      read_enable         : IN     std_logic;
      reset               : IN     std_logic;
      write_enable        : IN     std_logic;
      output_buffer_empty : OUT    std_logic;
      output_buffer_full  : OUT    std_logic;
      shadow_vertices     : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : adder USE ENTITY My_Lib.adder;
   FOR ALL : falling_edge_detect USE ENTITY My_Lib.falling_edge_detect;
   FOR ALL : input_fifo USE ENTITY My_Lib.input_fifo;
   FOR ALL : interm_buffer USE ENTITY My_Lib.interm_buffer;
   FOR ALL : matrix_controller USE ENTITY My_Lib.matrix_controller;
   FOR ALL : matrix_divide USE ENTITY My_Lib.matrix_divide;
   FOR ALL : multiplier USE ENTITY My_Lib.multiplier;
   FOR ALL : output_buffer USE ENTITY My_Lib.output_buffer;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_1 : adder
      PORT MAP (
         a       => data_out_a,
         b       => data_out_b,
         add_ass => add_ass,
         result  => result1
      );
   U_0 : falling_edge_detect
      PORT MAP (
         fifo_empty          => fifo_empty,
         clk                 => clk,
         reset               => reset,
         multiply_controller => multiply_controller
      );
   U_2 : input_fifo
      PORT MAP (
         reset            => reset,
         clk              => clk,
         data_in          => data_in,
         data_out_a       => data_out_a1,
         data_out_b       => data_out_b1,
         write_enable     => write_enable,
         read_enable      => read_enable,
         input_fifo_empty => input_fifo_empty,
         input_fifo_full  => input_fifo_full_internal
      );
   U_3 : interm_buffer
      PORT MAP (
         reset        => reset,
         clk          => clk,
         data_in      => divide_result,
         data_out_a   => data_out_a,
         data_out_b   => data_out_b,
         write_enable => intermediate_buffer_write_enable,
         read_enable  => intermediate_buffer_read_enable,
         reset_buffer => reset_intermediate_buffer,
         fifo_empty   => fifo_empty,
         buffer_full  => buffer_full
      );
   U_4 : matrix_controller
      PORT MAP (
         clk                              => clk,
         reset                            => reset,
         write_to_memory_controller       => write_to_memory_controller,
         input_fifo_full                  => input_fifo_full_internal,
         divide_done                      => divide_done,
         multiplication_done              => multiplication_done,
         multiply_controller              => multiply_controller,
         multiply                         => multiply,
         external_trigger                 => external_trigger,
         read_enable                      => read_enable,
         write_enable                     => OPEN,
         intermediate_buffer_full         => buffer_full,
         intermediate_buffer_read_enable  => intermediate_buffer_read_enable,
         intermediate_buffer_write_enable => intermediate_buffer_write_enable,
         output_buffer_empty              => output_buffer_empty_internal,
         output_buffer_full               => output_buffer_full_internal,
         read_enable_output_buffer        => read_enable_output_buffer,
         write_enable_output_buffer       => write_enable_output_buffer,
         reset_intermediate_buffer        => reset_intermediate_buffer,
         add_ass                          => add_ass
      );
   U_5 : matrix_divide
      PORT MAP (
         result              => result,
         clk                 => clk,
         reset               => reset,
         z_l                 => z_l,
         multiplication_done => multiplication_done,
         divide_result       => divide_result,
         divide_done         => divide_done
      );
   U_6 : multiplier
      PORT MAP (
         a                   => data_out_a1,
         b                   => data_out_b1,
         result              => result,
         multiplication_done => multiplication_done,
         output_ready        => input_fifo_full_internal,
         multiply            => multiply
      );
   U_7 : output_buffer
      PORT MAP (
         reset               => reset,
         clk                 => clk,
         adder_result        => result1,
         shadow_vertices     => shadow_vertices,
         write_enable        => write_enable_output_buffer,
         read_enable         => read_enable_output_buffer,
         output_buffer_empty => output_buffer_empty_internal,
         output_buffer_full  => output_buffer_full_internal
      );

   -- Implicit buffered output assignments
   input_fifo_full     <= input_fifo_full_internal;
   output_buffer_empty <= output_buffer_empty_internal;
   output_buffer_full  <= output_buffer_full_internal;

END struct;
